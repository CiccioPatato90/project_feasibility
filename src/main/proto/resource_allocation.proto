syntax = "proto3";
option java_multiple_files = true;

package resourceallocation;

service ResourceAllocationService {
  rpc AllocateResourcesLinearProgramming (AllocationRequest) returns (AllocationResponse);
  rpc AllocateResourcesGreedy (AllocationRequest) returns (AllocationResponse);
}
// ALLOCATION REQUEST PROTOs
message AllocationRequest {
  repeated Project projects = 1;
  repeated Resource resources = 2;
  AllocationStrategy strategy = 3;
}
message Project {
  string id = 1;
  string name = 2;
  map<string, int32> requirements = 3;
  int32 priority = 4;
}
message Resource {
  string id = 1;
  string name = 2;
  int32 capacity = 3;
  double cost = 4;
}
enum GreedyCriteria {
  DEFAULT_CRITERIA = 0;
  PROJECT_SIZE = 1;
  ASSOCIATION_ACTIVITY = 2;
  CREATION_DATE = 3;
}
enum GreedyCriteriaOrder {
  DEFAULT_ORDER = 0;
  LARGEST_FIRST = 1;
  SMALLEST_FIRST = 2;
}
message AllocationStrategy {
  GreedyCriteria criteria = 1;
  GreedyCriteriaOrder order = 2;
}


// ALLOCATION RESPONSE PROTOs
message AllocationResponse {
  string allocationId = 1;
  map<string, ProjectAllocation> projectAllocations = 2;
  AllocationStatus status = 3;
  AllocationStats global_stats = 4;
  map<string, ProjectStats> project_stats = 5;  // projectId -> stats
}
message ProjectAllocation {
  string projectId = 1;
  repeated ResourceAllocation resourceAllocations = 2;
}
message ResourceAllocation {
  string resourceId = 1;
  int32 allocatedAmount = 2;
}
message AllocationStats {
  // Global statistics
  int32 total_resources_available = 1;
  int32 total_resources_used = 2;
  double average_resources_per_project = 3;
  int32 unused_resources = 4;
  // Most/least used resources insights
  message ResourceUsage {
    string resource_id = 1;
    int32 usage_count = 2;
  }
  ResourceUsage most_assigned_resource = 5;
  ResourceUsage least_assigned_resource = 6;
}
message ProjectStats {
  double completion_percentage = 1;
  int32 assigned_resource_count = 2;
  map<string, int32> missing_resources = 3;  // resourceId -> count needed
}
enum AllocationStatus {
  UNKNOWN = 0;
  PENDING = 1;
  COMPLETED = 2;
  FAILED = 3;
}
